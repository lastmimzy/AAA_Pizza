from unittest.mock import patch
from click.testing import CliRunner
import random
from kitchen import bake, delivery, pickup
from pizza_class import Margharita, Pepperoni, Hawaiian
from click_pizza import order, menu


def test_bake():
    """—Ç–µ—Å—Ç –≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ bake()"""
    with patch.object(random, "randint", return_value=1):
        assert bake() == "üçï –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 1—Å!"


def test_delivery():
    """—Ç–µ—Å—Ç –≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ delivery()"""
    with patch.object(random, "randint", return_value=2):
        assert delivery() == "üö¥ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ 2—Å!"


def test_pickup():
    """—Ç–µ—Å—Ç –≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ pickup()"""
    with patch.object(random, "randint", return_value=3):
        assert pickup() == "üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ 3—Å!"


def test_eq_size_without_reciept():
    """—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–∏—Ü—Ü –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –≤
    –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ä–∞–∑–º–µ—Ä–∞"""
    assert Pepperoni("L").__str__(0) == Pepperoni("XL").__str__(0)
    assert Margharita("L").__str__(0) == Margharita("XL").__str__(0)
    assert Hawaiian("L").__str__(0) == Hawaiian("XL").__str__(0)


def test_eq_size_with_reciept():
    """—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ —Å–æ—Å—Ç–∞–≤ –ø–∏—Ü—Ü—ã –∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã –≤ –≥—Ä–∞–º–º–∞—Ö –º–µ–Ω—è—é—Ç—Å—è –≤
    –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–∏—Ü—Ü—ã"""
    assert Pepperoni("L").__str__(1) != Pepperoni("XL").__str__(1)
    assert Margharita("L").__str__(1) != Margharita("XL").__str__(1)
    assert Hawaiian("L").__str__(1) != Hawaiian("XL").__str__(1)


def test_2pizzas_equal():
    expected = False
    assert Pepperoni("L").__eq__(Margharita("L")) == expected


def test_order_with_delivery():
    """—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ order() —Å –æ–ø—Ü–∏–µ–π --delivery
    –∏ –≤–≤–æ–¥–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∏—Ü—Ü—ã —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º"""
    run = CliRunner()
    with patch.object(random, "randint", return_value=1):
        result = run.invoke(order, ["PePpeRoni", "--delivery"])
        actual = result.output
        expected = ("üçï –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 1—Å!\n"
                    "üö¥ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ 1—Å!\n")
        assert actual == expected


def test_order_without_delivery():
    """—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ order() –±–µ–∑ –æ–ø—Ü–∏–∏ --delivery
    –∏ –≤–≤–æ–¥–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∏—Ü—Ü—ã —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º"""
    run = CliRunner()
    with patch.object(random, "randint", return_value=2):
        result = run.invoke(order, ["HawaiiaN"])
        actual = result.output
        expected = ("üçï –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 2—Å!\n"
                    "üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ 2—Å!\n")
        assert actual == expected


def test_order_wrong_pizza():
    """—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—ã–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –µ—Å–ª–∏
    –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã"""
    run = CliRunner()
    with patch.object(random, "randint", return_value=2):
        result = run.invoke(order, ["4Cheese"])
        actual = result.output
        expected = ("–ú—ã —Ç–∞–∫—É—é –ø–∏—Ü—Ü—É –Ω–µ –≥–æ—Ç–æ–≤–∏–º üòî\n")
        assert actual == expected


def test_menu_without_reciept():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–µ–Ω—é –±–µ–∑ –æ–ø—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    —Å—Ç—Ä–æ–∫—É (L –∏–ª–∏ XL), —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞ —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã
    –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    run = CliRunner()
    result = run.invoke(menu)
    actual = result.output
    assert ("Pepperoni (L –∏–ª–∏ XL)" in actual and
            "Margharita (L –∏–ª–∏ XL)" in actual and
            "Hawaiian (L –∏–ª–∏ XL)" in actual)


def test_menu_with_reciept():
    """–¢–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ –ø—Ä–∏ –æ–ø—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    –ø–∏—Ü—Ü—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤—ã–¥–∞–µ—Ç—Å—è —Å–æ—Å—Ç–∞–≤ –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è –ø–∏—Ü—Ü—ã –≤ —Ä–∞–∑–º–µ—Ä–µ L """
    run = CliRunner()
    result = run.invoke(menu, ["--reciept"])
    actual = result.output
    assert ("Pepperoni(L)" in actual
            and "–≥." in actual)


def test_menu_with_reciept_size():
    """–¢–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ –ø—Ä–∏ –æ–ø—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ c —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
    –ø–∏—Ü—Ü—ã XL, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤—ã–¥–∞–µ—Ç—Å—è —Å–æ—Å—Ç–∞–≤ –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è –ø–∏—Ü—Ü—ã –≤ —Ä–∞–∑–º–µ—Ä–µ XL"""
    run = CliRunner()
    result = run.invoke(menu, ["--reciept", "--size", "XL"])
    actual = result.output
    assert ("Pepperoni(XL)" in actual
            and "–≥." in actual)


def test_menu_with_reciept_sizeS():
    """–¢–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ –ø—Ä–∏ –æ–ø—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ c —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–µ–≤–µ—Ä–Ω—ã—Ö
    —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∏—Ü—Ü—ã, –≤—ã–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π"""
    run = CliRunner()
    result = run.invoke(menu, ["--reciept", "--size", "S"])
    actual = result.output
    expected = "–ú—ã –Ω–µ –≥–æ—Ç–æ–≤–∏–º –ø–∏—Ü—Ü—É –≤ —ç—Ç–æ–º —Ä–∞–∑–º–µ—Ä–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä L –∏–ª–∏ XL\n"
    assert actual == expected
